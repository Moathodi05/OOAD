import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

// Enum for Account Types
enum AccountType {
    SAVINGS("Savings"),
    INVESTMENT("Investment"),
    CHEQUE("Cheque");
    
    private final String displayName;
    
    AccountType(String displayName) {
        this.displayName = displayName;
    }
    
    public String getDisplayName() {
        return displayName;
    }
}

// Customer Class
class Customer {
    private String firstName;
    private String surname;
    private String address;
    private List<Account> accounts;
    
    public Customer(String firstName, String surname, String address) {
        this.firstName = firstName;
        this.surname = surname;
        this.address = address;
        this.accounts = new ArrayList<>();
    }
    
    public void addAccount(Account account) {
        accounts.add(account);
    }
    
    public List<Account> getAccounts() {
        return accounts;
    }
    
    @Override
    public String toString() {
        return "Customer: " + firstName + " " + surname + ", Address: " + address;
    }
}

// Company Class
class Company {
    private String name;
    private String address;
    
    public Company(String name, String address) {
        this.name = name;
        this.address = address;
    }
    
    public String getName() {
        return name;
    }
    
    public String getAddress() {
        return address;
    }
    
    @Override
    public String toString() {
        return "Company: " + name + ", Address: " + address;
    }
}

// InterestBearing Interface
interface InterestBearing {
    double calculateInterest();
}

// Abstract Account Class
abstract class Account {
    protected String accountNumber;
    protected double balance;
    protected String branch;
    protected List<String> transactions;
    
    public Account(String accountNumber, double balance, String branch) {
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.branch = branch;
        this.transactions = new ArrayList<>();
    }
    
    public double deposit(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Deposit amount must be positive");
        }
        balance += amount;
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        transactions.add(timestamp + ": Deposited " + amount);
        return balance;
    }
    
    public abstract double withdraw(double amount);
    
    public double getBalance() {
        return balance;
    }
    
    public List<String> getTransactions() {
        return transactions;
    }
    
    public abstract AccountType getAccountType();
    
    @Override
    public abstract String toString();
}

// SavingsAccount Class
class SavingsAccount extends Account implements InterestBearing {
    public SavingsAccount(String accountNumber, double balance, String branch) {
        super(accountNumber, balance, branch);
    }
    
    @Override
    public double withdraw(double amount) {
        throw new UnsupportedOperationException("Withdrawals not allowed from Savings Account");
    }
    
    @Override
    public double calculateInterest() {
        double interest = balance * 0.0005; // 0.05% monthly interest
        balance += interest;
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        transactions.add(timestamp + ": Interest added " + interest);
        return interest;
    }
    
    @Override
    public AccountType getAccountType() {
        return AccountType.SAVINGS;
    }
    
    @Override
    public String toString() {
        return "Savings Account: " + accountNumber + ", Balance: " + balance;
    }
}

// InvestmentAccount Class
class InvestmentAccount extends Account implements InterestBearing {
    private static final double MIN_BALANCE = 500.0;
    
    public InvestmentAccount(String accountNumber, double balance, String branch) {
        super(accountNumber, balance, branch);
        if (balance < MIN_BALANCE) {
            throw new IllegalArgumentException("Investment account requires minimum deposit of BWP500");
        }
    }
    
    @Override
    public double withdraw(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Withdrawal amount must be positive");
        }
        if (amount > balance) {
            throw new IllegalArgumentException("Insufficient funds");
        }
        balance -= amount;
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        transactions.add(timestamp + ": Withdrew " + amount);
        return balance;
    }
    
    @Override
    public double calculateInterest() {
        double interest = balance * 0.05; // 5% monthly interest
        balance += interest;
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        transactions.add(timestamp + ": Interest added " + interest);
        return interest;
    }
    
    @Override
    public AccountType getAccountType() {
        return AccountType.INVESTMENT;
    }
    
    @Override
    public String toString() {
        return "Investment Account: " + accountNumber + ", Balance: " + balance;
    }
}

// ChequeAccount Class
class ChequeAccount extends Account {
    private Company company;
    
    public ChequeAccount(String accountNumber, Company company, double balance, String branch) {
        super(accountNumber, balance, branch);
        this.company = company;
    }
    
    @Override
    public double withdraw(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Withdrawal amount must be positive");
        }
        if (amount > balance) {
            throw new IllegalArgumentException("Insufficient funds");
        }
        balance -= amount;
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        transactions.add(timestamp + ": Withdrew " + amount);
        return balance;
    }
    
    @Override
    public AccountType getAccountType() {
        return AccountType.CHEQUE;
    }
    
    @Override
    public String toString() {
        return "Cheque Account: " + accountNumber + ", Company: " + company.getName() + ", Balance: " + balance;
    }
}

// Bank Class
class Bank {
    private String name;
    private List<Customer> customers;
    private List<Account> accounts;
    private int accountCounter;
    
    public Bank(String name) {
        this.name = name;
        this.customers = new ArrayList<>();
        this.accounts = new ArrayList<>();
        this.accountCounter = 1000;
    }
    
    private String generateAccountNumber() {
        accountCounter++;
        return "ACC" + accountCounter;
    }
    
    public void addCustomer(Customer customer) {
        customers.add(customer);
    }
    
    public Account openAccount(Customer customer, AccountType accountType, Object... params) {
        String accountNumber = generateAccountNumber();
        Account account;
        
        switch (accountType) {
            case SAVINGS:
                double savingsBalance = params.length > 0 && params[0] instanceof Double ? (Double) params[0] : 0.0;
                String savingsBranch = params.length > 1 && params[1] instanceof String ? (String) params[1] : "Main";
                account = new SavingsAccount(accountNumber, savingsBalance, savingsBranch);
                break;
                
            case INVESTMENT:
                double investmentBalance = params.length > 0 && params[0] instanceof Double ? (Double) params[0] : 500.0;
                String investmentBranch = params.length > 1 && params[1] instanceof String ? (String) params[1] : "Main";
                account = new InvestmentAccount(accountNumber, investmentBalance, investmentBranch);
                break;
                
            case CHEQUE:
                if (params.length < 1 || !(params[0] instanceof Company)) {
                    throw new IllegalArgumentException("Company information required for Cheque account");
                }
                Company company = (Company) params[0];
                double chequeBalance = params.length > 1 && params[1] instanceof Double ? (Double) params[1] : 0.0;
                String chequeBranch = params.length > 2 && params[2] instanceof String ? (String) params[2] : "Main";
                account = new ChequeAccount(accountNumber, company, chequeBalance, chequeBranch);
                break;
                
            default:
                throw new IllegalArgumentException("Invalid account type");
        }
        
        customer.addAccount(account);
        accounts.add(account);
        return account;
    }
    
    public void payInterest() {
        for (Account account : accounts) {
            if (account instanceof InterestBearing) {
                ((InterestBearing) account).calculateInterest();
            }
        }
    }
    
    public List<Customer> getCustomers() {
        return customers;
    }
    
    public List<Account> getAccounts() {
        return accounts;
    }
}

// Main Class to Demonstrate the Banking System
public class BankingSystem {
    public static void main(String[] args) {
        // Create a bank
        Bank bank = new Bank("Botswana Bank");
        
        // Create a customer
        Customer customer1 = new Customer("John", "Doe", "123 Main St, Gaborone");
        bank.addCustomer(customer1);
        
        // Create a company for cheque account
        Company company = new Company("Tech Corp", "456 Industrial Ave, Gaborone");
        
        // Open different types of accounts for the customer
        try {
            Account savingsAcc = bank.openAccount(customer1, AccountType.SAVINGS, 1000.0);
            System.out.println("Opened " + savingsAcc);
        } catch (Exception e) {
            System.out.println("Error opening savings account: " + e.getMessage());
        }
        
        try {
            Account investmentAcc = bank.openAccount(customer1, AccountType.INVESTMENT, 600.0);
            System.out.println("Opened " + investmentAcc);
        } catch (Exception e) {
            System.out.println("Error opening investment account: " + e.getMessage());
        }
        
        try {
            Account chequeAcc = bank.openAccount(customer1, AccountType.CHEQUE, company, 2000.0);
            System.out.println("Opened " + chequeAcc);
        } catch (Exception e) {
            System.out.println("Error opening cheque account: " + e.getMessage());
        }
        
        // Demonstrate deposits
        System.out.println("\n--- Making deposits ---");
        List<Account> accounts = customer1.getAccounts();
        Account savings = null, investment = null, cheque = null;
        
        for (Account acc : accounts) {
            if (acc.getAccountType() == AccountType.SAVINGS) savings = acc;
            else if (acc.getAccountType() == AccountType.INVESTMENT) investment = acc;
            else if (acc.getAccountType() == AccountType.CHEQUE) cheque = acc;
        }
        
        if (savings != null) savings.deposit(500.0);
        if (investment != null) investment.deposit(300.0);
        if (cheque != null) cheque.deposit(1500.0);
        
        System.out.println("Savings account balance: " + (savings != null ? savings.getBalance() : "N/A"));
        System.out.println("Investment account balance: " + (investment != null ? investment.getBalance() : "N/A"));
        System.out.println("Cheque account balance: " + (cheque != null ? cheque.getBalance() : "N/A"));
        
        // Demonstrate withdrawals
        System.out.println("\n--- Making withdrawals ---");
        try {
            if (investment != null) {
                investment.withdraw(200.0);
                System.out.println("Withdrew 200 from investment account. New balance: " + investment.getBalance());
            }
        } catch (Exception e) {
            System.out.println("Withdrawal error: " + e.getMessage());
        }
        
        try {
            if (cheque != null) {
                cheque.withdraw(1000.0);
                System.out.println("Withdrew 1000 from cheque account. New balance: " + cheque.getBalance());
            }
        } catch (Exception e) {
            System.out.println("Withdrawal error: " + e.getMessage());
        }
        
        // Try to withdraw from savings (should fail)
        try {
            if (savings != null) {
                savings.withdraw(100.0);
            }
        } catch (Exception e) {
            System.out.println("Could not withdraw from savings: " + e.getMessage());
        }
        
        // Pay interest to interest-bearing accounts
        System.out.println("\n--- Paying interest ---");
        bank.payInterest();
        
        System.out.println("Savings account balance after interest: " + (savings != null ? savings.getBalance() : "N/A"));
        System.out.println("Investment account balance after interest: " + (investment != null ? investment.getBalance() : "N/A"));
        System.out.println("Cheque account balance: " + (cheque != null ? cheque.getBalance() : "N/A") + " (no interest)");
        
        // Show customer account summary
        System.out.println("\n--- Customer Summary ---");
        System.out.println(customer1);
        for (Account account : customer1.getAccounts()) {
            System.out.println("  - " + account);
        }
    }
}
